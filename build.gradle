buildscript {
    repositories {
        mavenLocal()
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://libraries.minecraft.net/' }
        maven { url = 'https://maven.parchmentmc.org' }
        jcenter()
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'io.freefair.gradle:lombok-plugin:6.3.0'
        classpath 'org.parchmentmc:librarian:1.+'
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "io.freefair.lombok"
jarJar.enable()


version = '0.0.1'
group = 'jp.ukon.odm_gear'
archivesBaseName = "odm_gear-1.19.2"

jar {
    manifest {
        attributes([
                "Specification-Title"     : "odm_gear",
                "Specification-Vendor"    : "ukon",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "ukon",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

repositories {
    mavenCentral()
    mavenLocal()

    //他MODを導入せずにリポジトリの一部として扱う
    maven { //バニラ
        name 'Vanilla'
        url 'https://libraries.minecraft.net/'
    }
    maven { //Forge
        name 'ForgeFS'
        url 'https://maven.minecraftforge.net/'
    }
    /*maven { //tterrag
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com'
    }*/
    maven { //JEI用のmaven
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: "${minecraft_version}"

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    /*jarJar("com.tterrag.registrate:Registrate:${registrate_version}") {
        jarJar.ranged(it, '[MC1.19-1.1.5)')
    }
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")*/

    //JEIと連携できるように
    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge:${jei_version}")

    if (!Boolean.getBoolean('idea.sync.active')) {
        annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    }
}

jar.finalizedBy('reobfJar')
tasks.jarJar.finalizedBy('reobfJarJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
